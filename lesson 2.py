# 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт
# проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

ddd = 12
li = [123, [55,88],ddd,'try', True, {'usd','eur'}]
for i in range(len(li)):
    print(type(li[i]))

# 2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы
# индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().

li2 = input('Введите список значений через пробел:').split()
print(li2)
print(type(li2))

for i in range(0,len(li2)-1,2):
        li2[i],li2[i+1]= li2[i+1],li2[i]
print(li2)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года
# относится месяц (зима, весна, лето, осень). Напишите решения через list и dict.
# Словарь

year_di = {'зима': [1, 2, 12], 'весна':[3, 4, 5], 'лето': [6, 7, 8], 'осень': [9, 10, 11]}
months = int(input('Введите номер месяца:'))

if months > 12 or months < 1:
    print('Неверно введён месяц')
for el in year_di:
    if months in year_di[el]:
        print(el)

#списки

winter = [12, 1, 2]
spring = [3, 4, 5]
summer = [6, 7, 8]
autumn = [9, 10, 11]
months = int(input('Введите номер месяца:'))
if months > 12 or months < 1:
    print('Неверно введён месяц')
for elem in winter:
    if months is elem:
        print('Зима')
for elem in spring:
    if months is elem:
        print('Весна')
for elem in summer:
    if months is elem:
        print('Лето')
for elem in autumn:
    if months is elem:
        print('Осень')

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

li3 = input('Введите текст:').split()
for i, el in enumerate(li3, 1):
    print(f'{i}. {el[0:10]}')

# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы
# с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]
new = int(input('Введите оценку:'))

if new > my_list[0]:
    my_list.insert(0, new)
elif new <= my_list[-1]:
    my_list.append(new)
elif my_list.count(new)> 1:
    my_list.insert(my_list.index(new)+my_list.count(new), new)
else:
    for el in my_list:
        if el < new:
            my_list.insert(my_list.index(el), new)
            break
print(my_list)




